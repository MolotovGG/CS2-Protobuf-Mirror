name: Synchronise
on: 
  schedule:
    - cron: "42 0/4 * * *" 
  workflow_dispatch:
jobs:
  pull-hashes:
    runs-on: ubuntu-latest
    outputs:
      remote_commit: ${{ steps.remote_commit.outputs.remote_commit }}
      tracked_commit: ${{ steps.tracked_commit.outputs.tracked_commit }}
    steps:
      - name: Get Remote Commit
        id: remote_commit
        run: |
          REMOTE_COMMIT=$(curl https://api.github.com/repos/SteamDatabase/GameTracking-CS2/commits/master | jq ".sha" -r)
          printf "Remote SHA: $REMOTE_COMMIT"
          printf "remote_commit=$REMOTE_COMMIT\n" >> "$GITHUB_OUTPUT"
      - name: Get Tracked Commit
        id: tracked_commit
        run: |
          TRACKED_COMMIT_BASE64=$(curl https://api.github.com/repos/MolotovGG/CS2-Protobuf-Mirror/contents/hash.txt?ref=tracking | jq ".content" -r)
          if [[ TRACKED_COMMIT_BASE64 == "null" ]]; then
              TRACKED_COMMIT=$(printf "${TRACKED_COMMIT_BASE64}" | base64 -d)
              printf "Tracked SHA: $TRACKED_COMMIT"
              printf "tracked_commit=$TRACKED_COMMIT\n" >> "$GITHUB_OUTPUT"
          else
             printf "Tracked SHA: IS NULL? (${TRACKED_COMMIT_BASE64})"
             printf "tracked_commit=null\n" >> "$GITHUB_OUTPUT"
          fi
  update-tracking:
    runs-on: ubuntu-latest
    needs: [pull-hashes]
    if: "${{ (needs.pull-hashes.outputs.remote_commit != needs.pull-hashes.outputs.tracked_commit) && (needs.pull-hashes.outputs.remote_commit != 'null') }}"
    outputs:
        protobuf-updated: ${{ steps.check_protobuf.outputs.protobuf-updated }}
    env:
       latest_version: ${{ steps.remote_commit.outputs.remote_commit }}
    permissions:
      contents: write
    steps:
      - name: Checkout Tracking
        uses: actions/checkout@v4.2.2
        with:
          ref: "tracking"
      - name: Pull Remote
        run: |
            mkdir working/
            curl https://codeload.github.com/SteamDatabase/GameTracking-CS2/zip/refs/heads/master -o ./working/repo.zip
      - name: Extract Remote
        run:  unzip ./working/repo.zip -d ./working/repo/
      - name: Write Protobufs
        run: |
            rm -rf ./protobufs/
            mkdir ./protobufs/
            cp ./working/repo/GameTracking-CS2-master/Protobufs/* ./protobufs/
      - name: Write Metadata
        run: |
            cat ./working/repo/GameTracking-CS2-master/game/csgo/steam.inf > ./steam.inf
            printf "${latest_version}" > ./hash.txt
      - name: Cleanup Working
        run: rm -rf ./working/
      - name: Commit
        run: |
            git config user.email "bot@samh.dev"
            git config user.name "Synchronise"
            git add -A
            git commit -m "Update Mirror to ${latest_version:0:12}"
            git push
      - name: Check Protobuf Changes
        id: check_protobuf
        run: |
            DIFF=$(git --no-pager diff --name-only HEAD HEAD~1 -- ./a/)
            if [ -n "$DIFF" ]; then
                printf "Protobufs have changed"
                printf "protobuf-updated=1\n" >> "$GITHUB_OUTPUT"
            else
                printf "Protobufs haven't changed"
                printf "protobuf-updated=0\n" >> "$GITHUB_OUTPUT"
            fi
  update-main:
    runs-on: ubuntu-latest
    needs: [pull-hashes, update-tracking]
    if: "${{ (needs.updated-tracking.protobuf-updated == '1') }}"
    env:
       latest_version: ${{ needs.pull-hashes.outputs.tracked_commit }}
    permissions:
      contents: write
    steps:
      - name: Checkout Tracking
        uses: actions/checkout@v4.2.2
        with:
          ref: "main"
      - name: Merge Tracking
        run: |
            git config user.email "bot@samh.dev"
            git config user.name "Synchronise"
            git merge tracking -v -m "Update Mirror to ${latest_version:0:12}"  -s theirs
      - name: Push
        run: git push
